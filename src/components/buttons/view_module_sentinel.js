// src/components/buttons/view_module_sentinel.js
const { ButtonInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const prisma = require('../../prisma/client');

module.exports = {
    customId: 'view_module_sentinel',
    async execute(interaction) {
        await interaction.deferUpdate();
        const config = await prisma.guildConfig.findUnique({ where: { guildId: interaction.guild.id } });

        const status = config?.reportEnabled ? '`üü¢ ATIVADO`' : '`üî¥ DESATIVADO`';
        const channel = config?.reportChannelId ? `<#${config.reportChannelId}>` : '`‚ö†Ô∏è N√£o Definido`';
        
        // Formata o agendamento de forma leg√≠vel
        const schedule = (config?.reportDayOfWeek !== null && config?.reportTime) 
            ? `\`Toda ${['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'][config.reportDayOfWeek]} √†s ${config.reportTime}\``
            : '`‚ö†Ô∏è N√£o Definido`';

        const embed = new EmbedBuilder()
            .setColor(config?.reportEnabled ? '#2ecc71' : '#e74c3c')
            .setTitle('üì° M√≥dulo Sentinela - Relat√≥rios Autom√°ticos')
            .setImage('https://i.imgur.com/Kn1md4m.gif')
            .setDescription('Configure o sistema para receber relat√≥rios de performance semanais automaticamente no canal e hor√°rio definidos.')
            .addFields(
                { name: 'Status Atual', value: status, inline: true },
                { name: 'Canal de Destino', value: channel, inline: true },
                { name: 'Agendamento', value: schedule, inline: false }
            );

        const row1 = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('sentinel_toggle_status')
                .setLabel(config?.reportEnabled ? 'Desativar' : 'Ativar')
                .setStyle(config?.reportEnabled ? ButtonStyle.Danger : ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('sentinel_set_channel')
                .setLabel('Definir Canal')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('üì∫'),
            new ButtonBuilder()
                .setCustomId('sentinel_set_schedule')
                .setLabel('Definir Hor√°rio')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚è∞'),
            new ButtonBuilder()
                .setCustomId('sentinel_preview_report')
                .setLabel('Ver Pr√©via')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üìÑ')
        );
        const row2 = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
               .setCustomId('rpainel_view_registros')
               .setLabel('Voltar para M√≥dulos')
               .setStyle(ButtonStyle.Secondary)
               .setEmoji('‚¨ÖÔ∏è')
        );

        await interaction.editReply({ embeds: [embed], components: [row1, row2] });
    }
};