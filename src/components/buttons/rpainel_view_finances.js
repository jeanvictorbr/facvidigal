// src/components/buttons/rpainel_view_finances.js
const { ButtonInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const prisma = require('../../prisma/client');

// Fun√ß√£o para construir o painel. Vamos reutilizar isso depois.
async function buildFinancePanel(interaction) {
    const guildConfig = await prisma.guildConfig.findUnique({ where: { guildId: interaction.guild.id } });
    const targetProfit = guildConfig?.targetProfit;

    let embed = new EmbedBuilder()
        .setColor('#2ecc71')
        .setTitle('üí∞ Gerenciamento Financeiro')
        .setDescription('Use os bot√µes abaixo para gerenciar as metas de lucro da fac√ß√£o.')
        .setFooter({ text: 'Sistema de Gerenciamento Vision√°rios' });

    let mainButtons = new ActionRowBuilder();

    // L√≥gica para exibir a meta ou a mensagem de que n√£o h√° meta definida
    if (targetProfit) {
        // A gente n√£o tem o valor das vendas, ent√£o vamos simular um valor de 0 para o progresso.
        // Voc√™ pode substituir esta l√≥gica depois para buscar os valores reais do seu sistema de vendas.
        const currentProfit = 0;
        const progressPercentage = Math.round((currentProfit / targetProfit) * 100);
        const progressBarLength = 10;
        const filledBlocks = Math.floor(progressPercentage / progressBarLength);
        const emptyBlocks = progressBarLength - filledBlocks;
        const progressBar = '‚ñà'.repeat(filledBlocks) + '‚ñë'.repeat(emptyBlocks);

        embed.addFields(
            { name: 'üéØ Meta de Lucro', value: `> **$${targetProfit.toLocaleString('pt-BR')}**`, inline: true },
            { name: 'üí∞ Lucro Atual', value: `> **$${currentProfit.toLocaleString('pt-BR')}**`, inline: true },
            { name: 'üìà Progresso', value: `> ${progressBar} ${progressPercentage}%` }
        );

        mainButtons.addComponents(
            new ButtonBuilder()
                .setCustomId('set_profit_goal')
                .setLabel('Atualizar Meta')
                .setStyle(ButtonStyle.Success)
                .setEmoji('üéØ'),
            new ButtonBuilder()
                .setCustomId('remove_profit_goal')
                .setLabel('Remover Meta')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('üóëÔ∏è')
        );

    } else {
        embed.setDescription('Nenhuma meta de lucro foi definida. Use o bot√£o abaixo para come√ßar a monitorar o seu progresso.');
        mainButtons.addComponents(
            new ButtonBuilder()
                .setCustomId('set_profit_goal')
                .setLabel('Definir Meta de Lucro')
                .setStyle(ButtonStyle.Success)
                .setEmoji('üéØ')
        );
    }

    const backButton = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('rpainel_view_main')
                .setLabel('Voltar ao In√≠cio')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚¨ÖÔ∏è')
        );

    return { embeds: [embed], components: [mainButtons, backButton] };
}

module.exports = {
    customId: 'rpainel_view_finances',
    buildPanel: buildFinancePanel,
    async execute(interaction) {
        await interaction.deferUpdate();
        const panel = await buildFinancePanel(interaction);
        await interaction.editReply(panel);
    }
};