// src/commands/setup-modulos.js
const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const prisma = require('../prisma/client');

// Lista dos seus m√≥dulos. Voc√™ pode adicionar ou remover itens aqui.
const DEFAULT_MODULES = [
    { name: 'Comunica√ß√£o em Massa', description: 'M√≥dulo para envio de DMs em massa.', emoji: 'üì£' },
    { name: 'Gerenciamento de Recrutadores', description: 'Sistema de ranking e performance de recrutadores.', emoji: 'üìà' },
    { name: 'Registro Automatizado', description: 'Sistema de registro customiz√°vel e autom√°tico.', emoji: '‚úÖ' },
    { name: 'Sincroniza√ß√£o de Hierarquia', description: 'Mant√©m os cargos do Discord sincronizados.', emoji: 'üîÑ' },
    { name: 'M√≥dulo Financeiro', description: 'Calculadora, registro de vendas e ranking.', emoji: 'üí∞' },
    { name: 'Sentinela (Relat√≥rios)', description: 'Gera relat√≥rios de performance autom√°ticos.', emoji: 'üìä' },
    { name: 'Conduta e Puni√ß√µes', description: 'Organiza o hist√≥rico de puni√ß√µes.', emoji: '‚öñÔ∏è' },
    { name: 'Padroniza√ß√£o de Tags', description: 'Organiza apelidos com tags por cargo.', emoji: 'üè∑Ô∏è' },
    { name: 'Depura√ß√£o de Inativos', description: 'Ferramenta para limpeza de membros inativos.', emoji: 'üßπ' },
    { name: 'Opera√ß√µes T√°ticas', description: 'Sistema para agendamento de opera√ß√µes.', emoji: 'üéØ' },
    { name: 'Gerenciamento de Parcerias', description: 'Painel para visualizar e gerenciar parcerias.', emoji: 'ü§ù' },
    { name: 'Criador de Embeds', description: 'Est√∫dio para cria√ß√£o de embeds customizadas.', emoji: 'üé®' },
    { name: 'Criador de Sorteios', description: 'Crie Sorteios diretamente pelo bot de forma f√°cil!', emoji: 'üî•' },
];

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup-modulos')
        .setDescription('[DEV] Cria a lista inicial de m√≥dulos no banco de dados.')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const guildId = interaction.guild.id;

        try {
            // 1. Apaga os m√≥dulos antigos para evitar duplicatas
            await prisma.moduleStatus.deleteMany({ where: { guildId: guildId } });

            // 2. Prepara os novos dados
            const modulesToCreate = DEFAULT_MODULES.map(mod => ({
                ...mod,
                guildId: guildId,
                status: 'ONLINE' // Define todos como ONLINE por padr√£o
            }));

            // 3. Cria todos os novos m√≥dulos de uma vez
            await prisma.moduleStatus.createMany({
                data: modulesToCreate,
            });

            await interaction.editReply(`‚úÖ ${DEFAULT_MODULES.length} m√≥dulos foram registrados com sucesso no banco de dados!`);

        } catch (error) {
            console.error("Erro ao registrar m√≥dulos:", error);
            await interaction.editReply('‚ùå Ocorreu um erro ao tentar salvar os m√≥dulos no banco de dados.');
        }
    },
};